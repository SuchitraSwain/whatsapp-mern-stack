{"version":3,"sources":["logo.svg","SidebarChat.js","Sidebar.js","axios.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SidebarChat","useState","seed","setSeed","useEffect","Math","floor","random","className","Avatar","src","Sidebar","alt","IconButton","type","placeholder","instance","axios","create","baseURL","Chat","messages","input","setInput","sendMessage","e","a","preventDefault","post","message","name","timestamp","received","map","value","onChange","target","onClick","App","setMessages","get","then","response","data","channel","Pusher","cluster","subscribe","bind","unbind_all","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2fb1975a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport { Avatar } from \"@material-ui/core\";\n\nimport \"./SidebarChat.css\";\n\nfunction SidebarChat() {\n  const [seed, setSeed] = useState(\"\");\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  return (\n    <div className=\"sidebarChat\">\n      <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n      <div className=\"sidebarChat__info\">\n        <h2>Room Name</h2>\n        <p>this is the last message</p>\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport SidebarChat from \"./SidebarChat\";\n\nimport \"./Sidebar.css\";\n\nfunction Sidebar() {\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar\n          alt=\"Suchitra Swain\"\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTQ_pyC5_qp2mW9mfyk1TBR_2KlmW96Qh4S1Q&usqp=CAU\"\n        />\n        {/* <Avatar /> */}\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchOutlined />\n          <input type=\"text\" placeholder=\"search or start new chat\" />\n        </div>\n      </div>\n      <div className=\"sidebar__chats\">\n        <SidebarChat />\n        {/* {rooms.map((room) => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))} */}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://whatsapp-backend-mern.herokuapp.com\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport AttachFile from \"@material-ui/icons/AttachFile\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport axios from \"./axios\";\n\nfunction Chat({ messages }) {\n  const [seed, setSeed] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    await axios.post(\"/api/v1/messages/new\", {\n      message: input,\n      name: \"Swain\",\n      timestamp: \"Just Now\",\n      received: true,\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"chat__headerInfo\">\n          <h3>Room Name</h3>\n          <p>last seen</p>\n        </div>\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"chat__body\">\n        {messages.map((message) => (\n          <p\n            className={`chat___message ${message.received && \"chat__receiver\"}`}\n          >\n            <span className=\"chat__name\">{message.name}</span>\n            {message.message}\n            <span className=\"chat__timestamp\">{message.timestamp}</span>\n          </p>\n        ))}\n      </div>\n      <div className=\"chat__footer\">\n        <InsertEmoticonIcon />\n        <form>\n          <input\n            value={input}\n            onChange={(e) => {\n              setInput(e.target.value);\n            }}\n            type=\"text\"\n            placeholder=\"Type a message\"\n          />\n          <button type=\"submit\" onClick={sendMessage}>\n            Send a message\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"/api/v1/messages/sync\").then((response) => {\n      setMessages(response.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const pusher = new Pusher(\"b18ea9bb4d661524ae34\", {\n      cluster: \"ap2\",\n    });\n\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", function (data) {\n      // alert(JSON.stringify(data));\n      setMessages([...messages, data]);\n    });\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  return (\n    <div className=\"app\">\n      {/* sidebar */}\n      {/* chat component */}\n      <div className=\"app__body\">\n        <Sidebar />\n        <Chat messages={messages} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}